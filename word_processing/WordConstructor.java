
// WordConstructor.java
// Author: Vivaan Mahtab 

package word_processing;

import settings.Settings;
import java.util.ArrayList;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

/**
 * <em>WordConstructor class</em>
 * Requests a handle of a "word"
 * A single <em>WordConstructor</em> holds a grid for an individual
 * "word" and processing for how to perform functionality on it
 * 
 * @implNote a word represents a series of characters without spaces
 * @author Vivaan Mahtab
 *
 */
public class WordConstructor implements Settings{

	/**
	 * a grid to store <em>BULB_GRID_HEIGHT</em> by <em>length</em> 
	 * board that represents a binary representation of LED's to 
	 * be lit up to represent the "word"
	 * 
	 * @see settings.Settings
	 * @see <em>word</word>
	 */
	ArrayList<ArrayList<String>> grid;
	
	//The horizontal size of this.grid
	int length;
	
	//Storage of the original "word"
	private String seq;
	
	
	/**
	 * reads in "word" and finds corresponding characters in
	 * local/alphanumeric_characters and adds the binary
	 * representation in order of character appearance
	 * 
	 * @param word - the word to be generated by characters
	 * 
	 * @exception if a character within word does not have a
	 * 			  binary representation an error is thrown
	 * 
	 * @see local/alphanumeric_characters
	 */
	public WordConstructor(String word) {
		
		this.seq = word;
		this.grid = new ArrayList<ArrayList<String>>();
	
		//Makes "height" of grid the set height of grid
		for(int i = 0; i < BULB_GRID_HEIGHT; i++) {
			this.grid.add(new ArrayList<String>());
		}
	
	//Find path to local directory of character designs
	String path = System.getProperty("user.dir");
	
	//Break @param word into composite characters
	char[] chars = word.toUpperCase().toCharArray();

	BufferedReader reader = null;
	
		try {
			String strCurrentLine;
			
			//Iterate through each character of @param word
			for(int i = 0; i < chars.length; i++) {
				
				//SPECIAL CASE '/' character
				if(chars[i] == '/') {
					reader = new BufferedReader(new FileReader(path + "/src/Alphanumeric_Characters/f_slash"));
				}
				
				//SPECIAL CASE '.' character
				else if(chars[i] == '.') 
					reader = new BufferedReader(new FileReader(path + "/src/Alphanumeric_Characters/period"));
				
				//Find file of current character
				else
					reader = new BufferedReader(new FileReader(path + "/src/Alphanumeric_Characters/" + chars[i]));
				
				//iterate through each row of character
				int j = 0;
				while(j <= BULB_GRID_HEIGHT && (strCurrentLine = reader.readLine()) != null) {
					
					//adds row plus trailing '0' for kerning between displayed characters
					this.grid.get(j).add(strCurrentLine + "0");
					j++;
				}
				
				//Close current file reader to find new file
				try {
					if(reader!=null) 
						reader.close();
				} catch(IOException e) {
					e.printStackTrace();
				}
			}
			
			//remove trailing 0 column from last character
			if(grid.get(0).size()>0) {
				for(int i = 0; i < grid.size(); i++) {
					String index = grid.get(i).get(grid.get(i).size()-1);
					grid.get(i).set(grid.get(i).size()-1, index.substring(0, index.length()-1));
				}
			}
		
			
		} catch(IOException e) {e.printStackTrace();}
		
		//adds combined length of all characters composing of word grid
		this.length = 0;
		for(String subGrid : grid.get(0)) {
			this.length += subGrid.length();
		}
		
	}
	
	
	/**
	 * prints the grid into console such that on LED's are
	 * represented with an 'X' and off LED's are represented
	 * with no character
	 */
	public void print() {
		for(ArrayList<String> arr : this.getGrid()) {
			for(String str : arr) {
				for(char chr : str.toCharArray()) {
					if(chr == '1') {
						System.out.print("X ");
					}
					else {
						System.out.print("  ");
					}
				}
			}
			System.out.println();
		}
	}
	
	//getter for LED display grid
	public ArrayList<ArrayList<String>> getGrid() {
		return this.grid;
	}
	
	//getter for length
	public int getLength() {
		return this.length;
	}
	
	@Override
	public String toString() {
		return this.seq;
	}

}
